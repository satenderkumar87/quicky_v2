#!/usr/bin/env python3
"""
Test script to demonstrate the complete AI UI Generator workflow with hosting.
"""

import os
import time
import threading
from agent.vision import VisionProcessor
from agent.codegen import CodeGenerator
from agent.hosting import AppHosting

def generate_demo_component(img_data, component_name):
    """Generate a demo React component based on image analysis."""
    screen_name = component_name.replace('Component', '')
    elements = img_data.get('elements', [])
    
    # Generate element cards
    element_cards = []
    
    if elements and len(elements) > 0:
        for i, element in enumerate(elements[:4]):  # Limit to 4 elements for clean layout
            element_type = element.get('type', 'Element')
            bbox = element.get('bbox', {})
            width = bbox.get('width', 'N/A')
            height = bbox.get('height', 'N/A')
            
            element_cards.append(f"""              <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="font-semibold text-gray-900">{element_type.title()}</h3>
                <p className="text-sm text-gray-600">Size: {width} x {height}px</p>
              </div>""")
    else:
        # Default card if no elements
        element_cards.append("""              <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="font-semibold text-gray-900">Sample Element</h3>
                <p className="text-sm text-gray-600">No elements detected</p>
              </div>""")
    
    component_code = f"""import React from 'react';

const {component_name} = () => {{
  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-blue-600 text-white p-6">
        <h1 className="text-3xl font-bold">{screen_name}</h1>
        <p className="mt-2 text-blue-100">Generated from UI screenshot analysis</p>
      </header>
      
      <main className="p-6">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-lg shadow-lg p-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Detected UI Elements</h2>
            <div className="grid gap-4 md:grid-cols-2">
{chr(10).join(element_cards)}
            </div>
            
            <div className="mt-8 text-center">
              <button className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg">
                Interactive Button
              </button>
            </div>
          </div>
        </div>
      </main>
      
      <footer className="bg-gray-100 p-4 text-center text-gray-600 mt-8">
        <p>Generated by AI UI Generator - Live Demo</p>
      </footer>
    </div>
  );
}};

export default {component_name};"""
    
    return component_code

def test_complete_workflow():
    """Test the complete workflow: Generate -> Build -> Host -> Share URL."""
    print("🚀 Testing Complete AI UI Generator Workflow")
    print("=" * 50)
    
    # Step 1: Generate UI Components
    print("\n📋 Step 1: Processing UI Screenshots")
    vision_processor = VisionProcessor()
    image_data = vision_processor.process_multiple_images("input")
    
    if not image_data:
        print("❌ No images found in input directory!")
        return False
    
    print(f"✅ Processed {len(image_data)} screenshots")
    
    # Step 2: Generate React Components
    print("\n⚛️  Step 2: Generating React Components")
    components_data = []
    for img_data in image_data:
        component_name = img_data['filename'].replace('.', '').replace('-', '').replace('_', '').title() + 'Component'
        component_code = generate_demo_component(img_data, component_name)
        
        components_data.append({
            'filename': img_data['filename'],
            'component_name': component_name,
            'layout_info': img_data,
            'component_code': component_code
        })
    
    print(f"✅ Generated {len(components_data)} React components")
    
    # Step 3: Create React Project
    print("\n📦 Step 3: Creating React Project Structure")
    project_dir = "live_demo_project"
    code_generator = CodeGenerator(project_dir)
    code_generator.generate_project(components_data, "Live Demo Project")
    print(f"✅ React project created in: {project_dir}")
    
    # Step 4: Host the Application
    print("\n🌐 Step 4: Building and Hosting Application")
    hosting = AppHosting(project_dir)
    
    # Install dependencies
    if not hosting.install_dependencies():
        print("❌ Failed to install dependencies")
        return False
    
    # Start development server
    server_info = hosting.start_development_server()
    
    if server_info['status'] != 'success':
        print(f"❌ Failed to start server: {server_info.get('error')}")
        return False
    
    print(f"✅ Development server started successfully")
    print(f"🌐 Local URL: {server_info['local_url']}")
    
    # Step 5: Create Public URL (if ngrok is available)
    print("\n🌍 Step 5: Creating Public Shareable URL")
    public_url = hosting.create_public_tunnel()
    
    # Step 6: Display Results
    print("\n🎉 WORKFLOW COMPLETE!")
    print("=" * 60)
    print(f"📱 Local URL: {server_info['local_url']}")
    if public_url:
        print(f"🌍 Public URL: {public_url}")
        print("   👆 Share this URL with anyone!")
    else:
        print("🌍 Public URL: Not available (install ngrok for public sharing)")
    print(f"📁 Project Location: {project_dir}")
    print("=" * 60)
    
    # Keep server running for demo
    print("\n💡 Server is running. Press Ctrl+C to stop...")
    print("🔗 Open the URLs above to see your generated UI!")
    
    try:
        # Keep alive for demo
        while True:
            time.sleep(1)
            status = hosting.get_status()
            if not status['dev_running']:
                print("⚠️  Server stopped unexpectedly")
                break
    except KeyboardInterrupt:
        print("\n🛑 Shutting down...")
        hosting.stop_servers()
        print("✅ Demo completed successfully!")
    
    return True

if __name__ == "__main__":
    test_complete_workflow()
