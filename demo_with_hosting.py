#!/usr/bin/env python3
"""
Enhanced demo script that generates UI and automatically hosts it with shareable URL.
"""

import os
import time
from agent.vision import VisionProcessor
from agent.codegen import CodeGenerator
from agent.hosting import AppHosting

def generate_demo_component(img_data, component_name):
    """Generate a demo React component based on image analysis."""
    screen_name = component_name.replace('Component', '')
    elements = img_data.get('elements', [])
    
    # Create component sections based on detected elements
    element_cards = []
    
    if elements:
        for i, element in enumerate(elements[:6]):  # Limit to 6 elements
            element_type = element.get('type', 'component')
            bbox = element.get('bbox', {})
            width = bbox.get('width', 'N/A')
            height = bbox.get('height', 'N/A')
            area = element.get('area', 'N/A')
            
            if element_type == 'navbar':
                card_jsx = f"""              <div className="bg-white p-6 rounded-lg shadow-md border-l-4 border-blue-500">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Navigation Bar</h3>
                <p className="text-gray-600">Width: {width}px</p>
                <div className="mt-4 flex space-x-2">
                  <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">Home</span>
                  <span className="px-3 py-1 bg-gray-100 text-gray-800 rounded-full text-sm">About</span>
                  <span className="px-3 py-1 bg-gray-100 text-gray-800 rounded-full text-sm">Contact</span>
                </div>
              </div>"""
            elif element_type == 'button':
                card_jsx = f"""              <div className="bg-white p-6 rounded-lg shadow-md border-l-4 border-green-500">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Button Element</h3>
                <p className="text-gray-600">Size: {width} x {height}px</p>
                <button className="mt-4 bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded">
                  Sample Button
                </button>
              </div>"""
            elif element_type == 'container':
                card_jsx = f"""              <div className="bg-white p-6 rounded-lg shadow-md border-l-4 border-purple-500">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Content Container</h3>
                <p className="text-gray-600">Area: {area}px¬≤</p>
                <div className="mt-4 bg-gray-50 p-4 rounded">
                  <p className="text-sm text-gray-700">This represents a content area detected in your UI.</p>
                </div>
              </div>"""
            else:
                card_jsx = f"""              <div className="bg-white p-6 rounded-lg shadow-md border-l-4 border-gray-500">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">{element_type.title()} Component</h3>
                <p className="text-gray-600">Dimensions: {width} x {height}px</p>
                <div className="mt-4 bg-gray-100 h-16 rounded flex items-center justify-center">
                  <span className="text-gray-500 text-sm">UI Element</span>
                </div>
              </div>"""
            
            element_cards.append(card_jsx)
    else:
        # Default card if no elements detected
        element_cards.append("""              <div className="bg-white p-6 rounded-lg shadow-md border-l-4 border-gray-500">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Generated Component</h3>
                <p className="text-gray-600">No specific elements detected</p>
                <div className="mt-4 bg-gray-100 h-16 rounded flex items-center justify-center">
                  <span className="text-gray-500 text-sm">Placeholder Content</span>
                </div>
              </div>""")
    
    component_code = f"""import React from 'react';

const {component_name} = () => {{
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <header className="bg-blue-600 text-white p-6">
        <h1 className="text-3xl font-bold">{screen_name}</h1>
        <p className="mt-2 text-blue-100">Generated from UI screenshot analysis</p>
      </header>
      
      <main className="flex-1 p-6">
        <div className="max-w-6xl mx-auto">
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
{chr(10).join(element_cards)}
          </div>
        </div>
      </main>
      
      <footer className="bg-gray-100 p-4 text-center text-gray-600">
        <p>Generated by AI UI Generator - Demo Mode</p>
      </footer>
    </div>
  );
}};

export default {component_name};"""
    
    return component_code

def create_demo_with_hosting():
    """Create a demo project and automatically host it."""
    print("üöÄ Creating Demo AI-Generated UI Project with Auto-Hosting...")
    
    # Initialize components
    vision_processor = VisionProcessor()
    code_generator = CodeGenerator("hosted_demo_project")
    
    # Process images
    print("üñºÔ∏è  Processing images...")
    image_data = vision_processor.process_multiple_images("input")
    
    if not image_data:
        print("‚ùå No images found!")
        return False
    
    print(f"‚úÖ Processed {len(image_data)} images")
    
    # Create mock components data (simulating AI generation)
    components_data = []
    for img_data in image_data:
        component_name = img_data['filename'].replace('.', '').replace('-', '').replace('_', '').title() + 'Component'
        
        # Generate a simple React component based on detected elements
        component_code = generate_demo_component(img_data, component_name)
        
        components_data.append({
            'filename': img_data['filename'],
            'component_name': component_name,
            'layout_info': img_data,
            'component_code': component_code
        })
    
    print(f"‚úÖ Generated {len(components_data)} React components")
    
    # Load project description
    desc_file = "input/project_description.txt"
    project_description = ""
    if os.path.exists(desc_file):
        with open(desc_file, 'r') as f:
            project_description = f.read().strip()
    
    # Generate complete React project
    print("‚öõÔ∏è  Creating React project structure...")
    code_generator.generate_project(components_data, project_description)
    
    print("üéâ Demo Project Generated Successfully!")
    
    # Auto-host the application
    print("\nüåê Starting automatic hosting...")
    hosting = AppHosting("hosted_demo_project")
    deployment_info = hosting.deploy_and_host(mode='development')
    
    if deployment_info['status'] == 'success':
        print("\nüéä Complete Success!")
        print("=" * 60)
        print(f"üì± Your app is live at: {deployment_info['local_url']}")
        if deployment_info.get('public_url'):
            print(f"üåç Public URL: {deployment_info['public_url']}")
            print("   üëÜ Share this URL with anyone to preview your app!")
        print("=" * 60)
        
        # Keep the server running
        print("\nüí° Server is running. Press Ctrl+C to stop...")
        
        try:
            while True:
                time.sleep(1)
                status = hosting.get_status()
                if not status['dev_running'] and not status['preview_running']:
                    print("‚ö†Ô∏è  Server stopped unexpectedly")
                    break
                    
        except KeyboardInterrupt:
            print("\nüõë Shutting down servers...")
            hosting.stop_servers()
            print("‚úÖ Servers stopped successfully")
        except Exception as e:
            print(f"‚ùå Error: {e}")
            hosting.stop_servers()
            
    else:
        print(f"‚ö†Ô∏è  Hosting failed: {deployment_info.get('error', 'Unknown error')}")
        print("üí° You can still run manually:")
        print("   cd hosted_demo_project")
        print("   npm install")
        print("   npm run dev")
        return False
    
    return True

if __name__ == "__main__":
    create_demo_with_hosting()
